#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E               &kp R                        &kp T                                                          &kp Y        &kp U  &kp I      &kp O    &kp P
&kp A             &kp S         &kp D               &kp F                        &kp G        &kp SEMI                         &kp INT3         &kp H        &kp J  &kp K      &kp L    &kp MINUS
&mt LEFT_SHIFT Z  &kp X         &kp C               &kp V                        &kp B        &kp RIGHT_BRACKET                &lt 6 BACKSLASH  &kp N        &kp M  &kp COMMA  &kp DOT  &mt LEFT_SHIFT BACKSPACE
&mt LCTRL ESCAPE  &kp LEFT_WIN  &mt LEFT_ALT GRAVE  &lt_to_layer_0 6 INT_HENKAN  &lt 2 ENTER  &lt_to_layer_0 3 INT_MUHENKAN    &kp BACKSPACE    &lt 1 SPACE                             &kp SLASH
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&kp EXCLAMATION  &kp AT  &kp HASH  &kp DOLLAR  &kp PERCENT                                        &kp CARET     &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp LBKT
&kp SLASH        &trans  &trans    &trans      &trans       &trans          &trans                &trans        &trans         &trans        &trans                &kp EQUAL
&trans           &trans  &trans    &trans      &trans       &kp ASTERISK    &kp LEFT_PARENTHESIS  &kp KP_EQUAL  &kp INT3       &trans        &trans                &kp LS(INTERNATIONAL_1)
&trans           &trans  &trans    &trans      &trans       &trans          &trans                &trans                                                           &kp LS(QUESTION)
            >;
        };

        NUM {
            bindings = <
&kp F1  &kp F2  &kp F3  &kp F4   &kp F5                                 &trans  &trans  &kp LA(PRINTSCREEN)  &trans  &kp LA(LC(DELETE))
&kp F6  &kp F7  &kp F8  &kp F9   &kp F10  &kp LC(LA(C_MUTE))    &trans  &trans  &trans  &kp LG(LS(S))        &trans  &kp LC(ESCAPE)
&trans  &trans  &trans  &kp F11  &kp F12  &trans                &trans  &trans  &trans  &trans               &trans  &kp LC(LA(INS))
&trans  &trans  &trans  &trans   &trans   &trans                &trans  &trans                                       &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOLUME_DOWN>;
        };

        ARROW {
            bindings = <
&trans    &kp LC(LG(LEFT))  &kp UP_ARROW    &kp LC(LG(RIGHT))  &trans                               &kp KP_MULTIPLY  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_PLUS
&trans    &kp LEFT_ARROW    &kp DOWN_ARROW  &kp RIGHT_ARROW    &kp SEMICOLON   &trans    &trans     &kp KP_SLASH     &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp KP_MINUS
&kp HOME  &kp PAGE_DOWN     &kp END         &kp PG_UP          &kp APOSTROPHE  &trans    &trans     &kp UNDER        &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kt KP_NUMBER_3  &kp BACKSPACE
&trans    &trans            &trans          &trans             &trans          &trans    &kp ENTER  &kp KP_NUMBER_0                                                     &kp QUESTION
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                    &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans    &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                         &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans    &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans    &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans    &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
